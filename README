ABOUT
=====
Fracplanet generates random planets and terrain with oceans, 
mountains, icecaps and rivers.  Parameters are specified interactively 
and the results displayed using OpenGL.  The generated objects can be
dumped to Pov-Ray format.

It uses C++ (with STL), Qt and OpenGL.  

Home page: http://www.bottlenose.demon.co.uk/share/fracplanet

Author: timday at timday dot com

LICENSE
=======
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

[The license should be in the LICENSE file in this directory]

BUILDING
========
Either use the traditional
 ./configure
 make
(NB THe configure script is NOT autoconf generated)

Or just have both done for you by running 
  ./BUILD
(which also adds $QTDIR/bin to the PATH while running the above commands;
this may be useful on distros which don't have qmake in the default
user path).

NB In either case you do almost certainly do need your QTDIR 
environment variable to be correctly defined.

This will give you a "fracplanet" executable which you can run with
  ./fracplanet
or install where you like. 

[The author tests on RedHat8 & 9, and Debian testing (sarge).]

BUILD OPTIONS
=============
There are already some generally effective overrides for 
Qt's fairly conservative (at least on RedHat) compile options 
in the fracplanet.pro file (where QMAKE_CXXFLAGS_RELEASE is
modified).  If you change them, do a "make distclean" before 
you rebuild to make sure Makefiles are rebuilt. 

The easiest way to get some additional CPU-specific optimisations
is to use the configuration option:
  ./configure <cpu>
where <cpu> is "p3", "p4" or "xp" as appropriate e.g "./configure p4"
and rebuild from clean (again, "make distclean" is a good idea).
I've no idea how much benefit these provide.
You can also use these with the ./BUILD script e.g "./BUILD p4"

USAGE
=====
User documentation is contained in fracplanet.htm
If you just want to dive in all you need to know is this:
  After changing ANY of the terrain generation parameters, you must 
  hit "regenerate" to create and display a new model.
  This keeps the random seeds for terrain and river generation the same.
  There are a couple of extra buttons which also change the random seed 
  for the terrain or river network before regenerating,
  Most of the parameter entry fields have tooltips on them which 
  give an idea of what they're about.

PERFORMANCE
===========
The biggest factor influencing performance (both generation and 
display) is the degree of subdivision.  At subdivision level 8 
(for a planet) around 200MB of memory is required.  Subdivision level 9 
is not very well tested and appears to have some problems (see BUGS file).
On a 2.4GHz machine with a GeForce4 and the Nvidia OpenGL drivers display 
rates start to suffer around subdivision level 7.

When generating many rivers at high levels of subdivision, the 
river generation progress bar may stall for long periods 
(this is generally due to a large lake being formed somewhere).

INSTALL
=======
Doing 
  make install
will attempt to install the executable in 
  /usr/local/bin
and some HTML user documentation (fracplanet.htm and fracplanet.css ) in 
  /usr/local/share/doc/fracplanet
Obviously you'll probably need to be root for this stage.

RAY TRACING OUTPUT
==================
Once you have run fracplanet and saved a planet/landscape 
(as e.g terrain.pov and terrain.inc), do e.g
  povray -Q9 -geometry 768x576 terrain.pov
Expect to get a lot of "determinant too small" messages, 
especially when using high degrees of subdivision.
It takes POVRay a LOT longer to read large models than
to render them, so make the most of it once it's loaded
and use POVRay's animation capabilities to the max.

[Note: the author has only tested with povray 1.5; if there
are any problems with the new 1.6 please let me know].

BUILDING CODE DOCUMENTATION
===========================
If you have doxygen (and graphviz) and want to build the code documentation
subdirectory too, execute 
  ./mkdoc

THANKS
======
For bug reports, feedback and patches:
  Tobias Klausmann 
  Frank Plohmann 
  Steve Roylance 

